# Generated by Django 2.2 on 2020-08-18 16:07

import api.models
from api.models import Coordinator
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


def apply_migration(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    Group.objects.bulk_create(
        [
            Group(name=u"Student"),
            Group(name=u"Assistant"),
            Group(name=u"Coordinator"),
            Group(name=u"Guide"),
        ]
    )
    # c = Coordinator.objects.create(
    #     name="First Coordinator",
    #     email="c@somaiya.edu",
    #     password="admin",
    # )
    # c.set_password("admin")
    # cg = Group.objects.get(name=u"Coordinator")
    # c.groups.add(cg)
    # c.is_superuser = True
    # c.is_staff = True
    # c.save()


def revert_migration(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    Group.objects.filter(
        name__in=[
            u"Student",
            u"Assistant",
            u"Coordinator",
            u"Guide",
        ]
    ).delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=320, unique=True, verbose_name="email"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                (
                    "is_staff",
                    models.BooleanField(default=False, verbose_name="is staff"),
                ),
                ("name", models.CharField(max_length=400, verbose_name="name")),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="photos/%Y/",
                        verbose_name="photo",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
            managers=[
                ("objects", api.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Assignment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "due",
                    models.DateTimeField(
                        blank=True, default=None, null=True, verbose_name="due"
                    ),
                ),
                ("posted", models.DateTimeField(auto_now=True, verbose_name="posted")),
                ("title", models.CharField(max_length=500, verbose_name="title")),
                (
                    "weightage",
                    models.IntegerField(
                        blank=True, default=None, null=True, verbose_name="weightage"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("by", models.EmailField(max_length=320, verbose_name="by")),
                ("posted", models.DateTimeField(auto_now=True, verbose_name="posted")),
                ("content", models.TextField(verbose_name="content")),
            ],
        ),
        migrations.CreateModel(
            name="Preference",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "area_of_interest",
                    models.CharField(
                        choices=[
                            (
                                "AI",
                                "Artifical Intelligence (Machine Learning, Natural Language Processing, Robotics)",
                            ),
                            ("ARVR", "Augmented Reality and Virtual Reality"),
                            ("BD", "Big Data Processing"),
                            ("CLOUD", "Cloud Computing (High Performance Computing)"),
                            ("CN", "Computer Networking"),
                            (
                                "CS",
                                "Cyber Security (Forensics, Blockchain Technology, Biometrics Security, Cryptographic Techniques)",
                            ),
                            (
                                "EHIA",
                                "Embedded and Hardware Integrated Applications (IOT)",
                            ),
                            ("GIS", "GIS"),
                            ("IP", "Image Processing (Computer Vision)"),
                            ("OTHER", "Other"),
                            ("QC", "Quantum Computing"),
                            (
                                "SP",
                                "System Programming (Compiler construction, OS, Device drivers)",
                            ),
                            ("STA", "Software Testing Automation"),
                        ],
                        max_length=5,
                        verbose_name="area of interest",
                    ),
                ),
                (
                    "thrust_area",
                    models.CharField(
                        choices=[
                            ("AD", "Application Development"),
                            ("IM", "Information Management"),
                            ("KS", "Knowledge-based systems"),
                            ("NS", "Network and Security"),
                        ],
                        max_length=2,
                        verbose_name="thrust area",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("EX", "External"),
                            ("ID", "Inter-disciplinary"),
                            ("IN", "Internal"),
                        ],
                        default="IN",
                        max_length=2,
                        verbose_name="category",
                    ),
                ),
                ("description", models.TextField(verbose_name="description")),
                (
                    "domain",
                    models.CharField(
                        choices=[
                            (
                                "AI",
                                "Artifical Intelligence (Machine Learning, Natural Language Processing, Robotics)",
                            ),
                            ("ARVR", "Augmented Reality and Virtual Reality"),
                            ("BD", "Big Data Processing"),
                            ("CLOUD", "Cloud Computing (High Performance Computing)"),
                            ("CN", "Computer Networking"),
                            (
                                "CS",
                                "Cyber Security (Forensics, Blockchain Technology, Biometrics Security, Cryptographic Techniques)",
                            ),
                            (
                                "EHIA",
                                "Embedded and Hardware Integrated Applications (IOT)",
                            ),
                            ("GIS", "GIS"),
                            ("IP", "Image Processing (Computer Vision)"),
                            ("OTHER", "Other"),
                            ("QC", "Quantum Computing"),
                            (
                                "SP",
                                "System Programming (Compiler construction, OS, Device drivers)",
                            ),
                            ("STA", "Software Testing Automation"),
                        ],
                        default="AI",
                        max_length=5,
                        verbose_name="domain",
                    ),
                ),
                (
                    "explanatory_field",
                    models.TextField(
                        blank=True, null=True, verbose_name="explanatory field"
                    ),
                ),
                ("title", models.CharField(max_length=500, verbose_name="title")),
            ],
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Coordinator",
            fields=[
                (
                    "user_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("api.user",),
            managers=[
                ("objects", api.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Guide",
            fields=[
                (
                    "user_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "branch",
                    models.CharField(
                        choices=[
                            ("CS", "Computer Science"),
                            ("ETRX", "Electronics"),
                            ("EXTC", "Electronics And Telecommunication"),
                            ("IT", "Information Technology"),
                            ("MECH", "Mechanical"),
                        ],
                        default="IT",
                        max_length=4,
                        verbose_name="branch",
                    ),
                ),
                ("initials", models.CharField(max_length=10, verbose_name="initials")),
                (
                    "preferences",
                    models.ManyToManyField(
                        blank=True, to="api.Preference", verbose_name="preferences"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("api.user",),
            managers=[
                ("objects", api.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "user_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "branch",
                    models.CharField(
                        choices=[
                            ("CS", "Computer Science"),
                            ("ETRX", "Electronics"),
                            ("EXTC", "Electronics And Telecommunication"),
                            ("IT", "Information Technology"),
                            ("MECH", "Mechanical"),
                        ],
                        default="IT",
                        max_length=4,
                        verbose_name="branch",
                    ),
                ),
                (
                    "roll_number",
                    models.IntegerField(unique=True, verbose_name="roll number"),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("api.user",),
            managers=[
                ("objects", api.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="ProjectRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(auto_now=True, verbose_name="created"),
                ),
                ("description", models.TextField(verbose_name="description")),
                (
                    "last_modified",
                    models.DateTimeField(
                        auto_now_add=True, null=True, verbose_name="last modified"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("A", "Accepted"),
                            ("P", "Pending"),
                            ("R", "Rejected"),
                        ],
                        default="P",
                        max_length=1,
                        verbose_name="status",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.Project",
                        verbose_name="project",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="project",
            name="team",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                to="api.Team",
                verbose_name="team",
            ),
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(upload_to="uploads/%Y/", verbose_name="file"),
                ),
                (
                    "submitted_by",
                    models.EmailField(max_length=320, verbose_name="submitted by"),
                ),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.Assignment",
                        verbose_name="assignment",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Team",
                        verbose_name="team",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="team",
            name="guide",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="team_guide",
                to="api.Guide",
                verbose_name="guide",
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="leader",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="team_leader",
                to="api.Student",
                verbose_name="leader",
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="project",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.Project",
                verbose_name="project",
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="team",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.Team",
                verbose_name="team",
            ),
        ),
        migrations.CreateModel(
            name="GroupRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("Change Leader", "Change Leader"),
                            ("Removal", "Removal of a student from group"),
                            ("Add", "Addition of a student to a group"),
                        ],
                        max_length=13,
                        verbose_name="action",
                    ),
                ),
                ("description", models.TextField(verbose_name="description")),
                (
                    "generated",
                    models.DateTimeField(auto_now=True, verbose_name="generated on"),
                ),
                (
                    "processed",
                    models.DateTimeField(
                        auto_now_add=True, null=True, verbose_name="processed on"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("A", "Accepted"),
                            ("P", "Pending"),
                            ("R", "Rejected"),
                        ],
                        default="P",
                        max_length=1,
                        verbose_name="status",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.Team",
                        verbose_name="team",
                    ),
                ),
                (
                    "add_student",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="add_student",
                        to="api.Student",
                        verbose_name="add student",
                    ),
                ),
                (
                    "new_leader",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="new_leader",
                        to="api.Student",
                        verbose_name="new leader",
                    ),
                ),
                (
                    "old_leader",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="old_leader",
                        to="api.Student",
                        verbose_name="old leader",
                    ),
                ),
                (
                    "remove_student",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="remove_student",
                        to="api.Student",
                        verbose_name="remove student",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Grade",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "graded_on",
                    models.DateTimeField(auto_now_add=True, verbose_name="graded on"),
                ),
                (
                    "marks_obtained",
                    models.IntegerField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="marks obtained",
                    ),
                ),
                (
                    "turned_in",
                    models.BooleanField(default=False, verbose_name="turned in"),
                ),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.Assignment",
                        verbose_name="assignment",
                    ),
                ),
                (
                    "guide",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.Guide",
                        verbose_name="guide",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.Student",
                        verbose_name="student",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="assignment",
            name="coordinator",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="api.Coordinator",
                verbose_name="coordinator",
            ),
        ),
        migrations.RunPython(apply_migration, revert_migration),
    ]
